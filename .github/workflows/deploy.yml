name: Deploy MediPlus

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-north-1
      DOMAIN: mypodsix.online
      APP_NAME: mediplus
      TF_DIR: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan

      - name: Terraform Apply
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: tf_outputs
        working-directory: ${{ env.TF_DIR }}
        run: |
          echo "WEB_IP=$(terraform output -raw web_server_public_ip)" >> $GITHUB_ENV
          echo "ECR_REPO_URL=$(terraform output -raw ecr_repo_url)" >> $GITHUB_ENV

      - name: Wait for EC2 instance to initialize
        run: |
          echo "Waiting 90 seconds for EC2 instance to be ready..."
          sleep 90


      - name: Deploy app with Docker Compose + Nginx + SSL
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker-compose.yml nginx.conf ubuntu@${WEB_IP}:/home/ubuntu/
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${WEB_IP} << 'EOF'
            set -e
            sudo apt update -y
            sudo apt install -y docker.io docker-compose nginx certbot python3-certbot-nginx
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo mv ~/nginx.conf /etc/nginx/sites-available/default
            sudo systemctl restart nginx
            export ECR_REPO_URL="${ECR_REPO_URL}"
            sudo docker-compose pull
            sudo docker-compose down || true
            sudo docker-compose up -d --remove-orphans
            sudo certbot --nginx -d mypodsix.online -d www.mypodsix.online --non-interactive --agree-tos -m your-email@example.com
            sudo systemctl reload nginx
          EOF
