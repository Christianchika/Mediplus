name: Deploy Infrastructure to AWS using Terraform

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-north-1
      DOMAIN: mypodsix.online
      APP_NAME: mediplus
      TF_DIR: terraform

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3Ô∏è‚É£ Setup SSH key
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # 4Ô∏è‚É£ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      # 5Ô∏è‚É£ Terraform Init
      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init

      # 6Ô∏è‚É£ Terraform Plan
      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan 

      # 7Ô∏è‚É£ Terraform Apply
      - name: Terraform Apply
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -auto-approve 

      # 8Ô∏è‚É£ Get Terraform Outputs
      - name: Get Terraform Outputs
        id: tf_outputs
        working-directory: ${{ env.TF_DIR }}
        run: |
          echo "WEB_IP=$(terraform output -raw web_server_public_ip)" >> $GITHUB_ENV
          echo "ECR_REPO_URL=$(terraform output -raw ecr_repo_url)" >> $GITHUB_ENV

      # 9Ô∏è‚É£ Wait 180s for DNS & EC2 initialization
      - name: Wait for DNS and EC2
        run: |
          echo "Waiting 180 seconds for EC2 and DNS to stabilize..."
          sleep 180

      # üîü Login to AWS ECR
      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL

      # 1Ô∏è‚É£1Ô∏è‚É£ Build and push Docker image
      - name: Build and push Docker image
        run: |
          docker build -t mediplus-app .
          docker tag mediplus-app:latest $ECR_REPO_URL:latest
          docker push $ECR_REPO_URL:latest

      # 1Ô∏è‚É£2Ô∏è‚É£ Deploy to EC2 with Docker + Nginx
      - name: Deploy app and Nginx to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker-compose.yml nginx.conf ubuntu@${WEB_IP}:/home/ubuntu/
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${WEB_IP} << 'EOF'
            set -e
            sudo apt update -y
            sudo apt install -y docker.io docker-compose nginx
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo systemctl enable nginx
            sudo systemctl restart nginx
            cd /home/ubuntu
            export ECR_REPO_URL="${ECR_REPO_URL}"
            sudo docker-compose pull
            sudo docker-compose down || true
            sudo docker-compose up -d --remove-orphans
          EOF
